@charset "utf-8";
/*
Theme Name: スターターパッケージ
Theme URI: http://xxx.jp/
Description: 
Version: 1.0
Author: Kazuhiro Ikeda
Author URI: http://moriad.jp/
*/
@import url(css/reset.css);
@import url(css/common.css);
@import url(css/element.css);
@import url(css/wysiwyg.css);
@import url(css/nav.css);
@import url(css/preload.css);

/* ページ */
@import url(css/contact.css);

/* カスタム */
@import url(css/custom.css);

/* jQuery */
@import url(css/lightbox.css);





/*//////////////////////////////////////////　コーディングポリシー　//////////////////////////////////////////*/

/*
＊命名規則

	＊＊視認性及び「必要以上の時間節約」のために画像名とCSSクラス名は親子関係や単語の意味合いの違いがあってもハイフンつなぎで命名。
	
		CSS：.xxx-yyy-zzz
		画像：xxx-yyy-zzz.png 
		
	＊＊関係を「ユニークな名称など特に強調したい場合のみ」アンダーバーで命名
	
		CSS：.box-osx_imac .box-osx_mac_book_air .box-win_ibm など

	＊＊画像はファインダーで探しやすいように要素のカテゴリを意識して命名。カテゴリや要素の大枠から小枠へ命名。
	
		場所に関連して命名する場合　［場所］-［要素のカテゴリー］-［名称］：header-logo.png  footer-logo.png  header-btn-contact.png side-btn-contact.png  footer-btn-contact
		要素に関連して命名する場合　［要素のカテゴリー］-［場所］-［名称］：logo-header.png  logo-footer.png  btn-header-contact.png  btn-side-contact.png  btn-footer-contact
			
	＊＊場所や海藻に依存するセレクタは「あまり」使用しない。
	
		よくない例：要素の親をたどり命名する方法。htmlはシンプルになるがスタイリング複雑になる。
		
			#header h1
			footer p
			nav ul
			#hoge h2
			
		良い例：
		
			<header>
				<h1 class="page-ttl">hogehoge</h1>
			</header>
			
			<nav id="hoge">
				<ul id="nav-hoge" class="hoge-list nav-list">
					<li id="hoge-list-item-01" class="hoge-list-item nav-list-item">hogehoge</li>
					<li id="hoge-list-item-02" class="hoge-list-item nav-list-item">hogehoge</li>
					<li id="hoge-list-item-03" class="hoge-list-item nav-list-item">hogehoge</li>
				</ul>
			</nav>
			
			<section id="hoge">
				<h1 class="h-01">hogehoge</h1>
			</section>

	＊＊プロパティをまとめる
	
		<div class="hoge">
			<a class="hoge-item"></a>
		</div><!-- /.hoge -->
		
		.hoge {
			position: relative;
		}
		.hoge-item {
			display: block
			width: 400px;
			height: 100px;
			background-repeat: repeat-x;
			position: absolute;
		}
		#hoge-01 {
			background-image: url(hoge/hoge-01.png);
			top: 10px;
			left: 100px;
		}
		#hoge-02 {
			background-image: url(hoge/hoge-02.png);
			top: 120px;
			left: 100px;
		}
		#hoge-02 {
			background-image: url(hoge/hoge-03.png);
			top: 220px;
			left: 100px;
		}

＊構造の視覚化

	＊＊クリアフィックス
	
		基本として、どこに処理が施されているか分かりやすくするためクリアフィックスが必要なhtmlの要素にクラスを指定 .cl
		
	＊＊inner
	
		基本として、どこにinnerスタイルが施されているか分かりやすくするため必要なhtmlの要素にクラスを指定 .screen










*/